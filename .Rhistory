install.packages("brms")
library(brms)
fit1 <- brm(count ~ zAge + zBase * Trt + (1|patient),
data = epilepsy, family = poisson())
summary(fit1)
plot(fit1, pars = c("Trt", "zBase"))
stancode(fit1)
fit1 <- brm(count ~ zAge + zBase * Trt + (1|patient),
data = epilepsy, family = poisson())
epilepsy
library(igraph)
library(igraphdata)
igraphdata
karate
igraphdata:::karate
karate
data("karate")
karate
as_edgelist(karate)
k_edges <- as_edgelist(karate)
library(tidyverse)
k_edges <- as_edgelist(karate) %>% as.data.frame()
View(k_edges)
colnames(k_edges) <- c("V1","V2")
source('~/Documents/School/Fall_2019/Research/Code/karate_edge_list.R')
View(k_edges)
write.csv("Data/karate_edge_list.csv")
write.csv(k_edges,
"Data/karate_edge_list.csv",
quote = FALSE,
row.names = FALSE)
unique(c(k_edges$V1,k_edges$V2))
k_edges$V1
unique(c(as.character(k_edges$V1),as.character(k_edges$V2)))
length(unique(c(as.character(k_edges$V1),as.character(k_edges$V2))))
data("karate")
karate
install.packages(c("igraph", "igraphdata"))
install.packages("sbmlogit")
install.packages("~/Documents/School/Research/Code/sbm-code/sbmlogit.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/School/Research/Code/sbm-code/sbmlogit.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/School/Research/Code/sbm-code/sbmlogit.tar.gz", repos = NULL, type = "source")
install.packages("igraph")
library(igraph)
install.packages("~/Documents/School/Research/Code/sbm-code/sbmlogit.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/School/Research/Code/sbm-code/sbmlogit.tar.gz", repos = NULL, type = "source")
library(sbmlogit)
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE,cache = TRUE)
library(igraph)
library(igraphdata)
library(sbmlogit)
data("karate")
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 2000)
# Function for map estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
SigmaK2 <- fitK2$sample # posterior samples
sigmaK2 <- apply(t(apply(SigmaK2, 2, mp, 2)), 1, which.max) # posterior estimator
scentroidK2 <- sbmlogit.remap(sigmaK2) # remapped posterior estimator
print(scentroidK2)
# function to compute WAIC
# verify this is correct
waic <- function(fit,burn = 0)
{
S <- length(fit$lhood)
ls <- exp(fit$lhood[(burn+1):S])
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 1000)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 1000)
fitK5 <- sbmlogit.mcmc(graph = karate,alpha = 5,nsamples = 1000)
waic(fitK2, burn = 100)
waic(fitK3, burn = 100)
waic(fitK4, burn = 100)
waic(fitK5, burn = 100)
summary(fitK2$gamma)
source('~/Documents/School/Research/Code/sbmlogit/mean_CRI.R')
mean_CRI(fitK2$gamma)
source('~/Documents/School/Research/Code/sbmlogit/mean_CRI.R')
mean_CRI(fitK2$gamma)
source('~/Documents/School/Research/Code/sbmlogit/mean_CRI.R')
mean_CRI(fitK2$gamma)
source('~/Documents/School/Research/Code/sbmlogit/mean_CRI.R')
vcount(karate)
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 2000)
install.packages("shiny")
colMeans(fitK2$eta)
expit <- function(l)
{
return(exp(l)/(1+exp(l)))
}
expit(colMeans(fitK2$eta))
class(fitK2)
typeof(fitK2)
str(fitK2)
str(fitK2$graph)
class(fitK2$graph)
library(igraph)
library(tidygraph)
install.packages("tidygraph")
install.packages("ggraph")
# function to plot SBM fit for sbmlogit package
library(ggraph)
library(tidygraph)
ggraph(karate)
options(device = "X11")
ggraph(karate)
windows()
ggraph(karate, layout = "kk") + geom_node_point() + geom_edge_link()
fitK2$ngroups
source('~/Documents/School/Research/Code/sbmlogit/get_labels.R')
get_labels(fitK2)
get_labels(fitK3)
get_labels(fitK4)
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
fitK2_plot <- plot_sbmlogit(fitK2)
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
getwd()
