expit(colMeans(fitK2$eta))
class(fitK2)
typeof(fitK2)
str(fitK2)
str(fitK2$graph)
class(fitK2$graph)
library(igraph)
library(tidygraph)
install.packages("tidygraph")
install.packages("ggraph")
# function to plot SBM fit for sbmlogit package
library(ggraph)
library(tidygraph)
ggraph(karate)
options(device = "X11")
ggraph(karate)
windows()
ggraph(karate, layout = "kk") + geom_node_point() + geom_edge_link()
fitK2$ngroups
source('~/Documents/School/Research/Code/sbmlogit/get_labels.R')
get_labels(fitK2)
get_labels(fitK3)
get_labels(fitK4)
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
fitK2_plot <- plot_sbmlogit(fitK2)
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
getwd()
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE,cache = TRUE)
library(igraph)
library(igraphdata)
library(sbmlogit)
data("karate")
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 2000)
# Function for estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
SigmaK2 <- fitK2$sample # posterior samples
sigmaK2 <- apply(t(apply(SigmaK2, 2, mp, 2)), 1, which.max) # posterior estimator
scentroidK2 <- sbmlogit.remap(sigmaK2) # remapped posterior estimator
print(scentroidK2)
# function to compute WAIC
# verify this is correct
waic <- function(fit,burn = 0)
{
S <- length(fit$lhood)
ls <- exp(fit$lhood[(burn+1):S])
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 1000)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 1000)
fitK5 <- sbmlogit.mcmc(graph = karate,alpha = 5,nsamples = 1000)
waic(fitK2, burn = 100)
waic(fitK3, burn = 100)
waic(fitK4, burn = 100)
waic(fitK5, burn = 100)
source("mean_CRI.R")
mean_CRI(fitK2$gamma)
expit <- function(l)
{
return(exp(l)/(1+exp(l)))
}
expit(colMeans(fitK2$eta))
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
v(karate)
V(karate)
install.packages("tidyverse")
install.packages("curl")
install.packages("libcurl")
install.packages("ggplot")
version
install.packages("tidyverse")
library(tidyverse)
library(ggraph)
library(tidygraph)
library(tidyverse)
graph = fit$graph %>%
as_tibble() # should be an igraph object
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE,cache = TRUE)
library(igraph)
library(igraphdata)
library(sbmlogit)
data("karate")
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 2000)
# Function for estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
SigmaK2 <- fitK2$sample # posterior samples
sigmaK2 <- apply(t(apply(SigmaK2, 2, mp, 2)), 1, which.max) # posterior estimator
scentroidK2 <- sbmlogit.remap(sigmaK2) # remapped posterior estimator
print(scentroidK2)
# function to compute WAIC
# verify this is correct
waic <- function(fit,burn = 0)
{
S <- length(fit$lhood)
ls <- exp(fit$lhood[(burn+1):S])
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 1000)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 1000)
fitK5 <- sbmlogit.mcmc(graph = karate,alpha = 5,nsamples = 1000)
waic(fitK2, burn = 100)
waic(fitK3, burn = 100)
waic(fitK4, burn = 100)
waic(fitK5, burn = 100)
source("mean_CRI.R")
mean_CRI(fitK2$gamma)
expit <- function(l)
{
return(exp(l)/(1+exp(l)))
}
expit(colMeans(fitK2$eta))
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
karate %>% as_tbl_graph()
karate %>% as_tbl_graph() %>% activate(nodes)
karate %>% as_tbl_graph() %>% activate(nodes) %>% mutate(sig = sigmaK2)
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
fitK2$graph %>% as_tbl_graph()
fitK2$graph %>% as_tbl_graph() %>% pull(color)
karate %>% as_tbl_graph() %>% pull(color)
karate %>% as_tbl_graph() %>% activate(nodes)
sigma = get_labels(fitK2) # returns the remapped posterior labels
graph = fitK2$graph %>% # should be an igraph object
as_tbl_graph() %>%
active(nodes) %>%
mutate(sig = sigma)
fitK2$graph as_tbl_graph()
fitK2$graph %>% as_tbl_graph()
fitK2$graph %>% as_tbl_graph() %>% activate(nodes)
graph = fit$graph %>% # should be an igraph object
as_tbl_graph() %>%
active(nodes)
fit = fitK2
graph = fit$graph %>% # should be an igraph object
as_tbl_graph() %>%
active(nodes)
fit$graph
graph = fit$graph %>%
as_tbl_graph() %>%
active(nodes) %>%
mutate(sig = sigma)
fit$graph %>% as_tbl_graph()
fit$graph %>% as_tbl_graph() %>% activate(nodes)
graph = fit$graph %>% # should be an igraph object
as_tbl_graph() %>%
activate(nodes) %>%
mutate(sig = sigma)
p = ggraph(graph,layout = "kk") +
geom_node_point(aes(color = sig)) +
geom_edge_link()
p
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
get_labels(fitK2)
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE,cache = TRUE)
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
unlink('Code/sbmlogit/karate_test_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE,cache = TRUE)
library(igraph)
library(igraphdata)
library(sbmlogit)
data("karate")
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 2000)
# Function for estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
SigmaK2 <- fitK2$sample # posterior samples
sigmaK2 <- apply(t(apply(SigmaK2, 2, mp, 2)), 1, which.max) # posterior estimator
scentroidK2 <- sbmlogit.remap(sigmaK2) # remapped posterior estimator
print(scentroidK2)
# function to compute WAIC
# verify this is correct
waic <- function(fit,burn = 0)
{
S <- length(fit$lhood)
ls <- exp(fit$lhood[(burn+1):S])
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 1000)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 1000)
fitK5 <- sbmlogit.mcmc(graph = karate,alpha = 5,nsamples = 1000)
waic(fitK2, burn = 100)
waic(fitK3, burn = 100)
waic(fitK4, burn = 100)
waic(fitK5, burn = 100)
source("mean_CRI.R")
mean_CRI(fitK2$gamma)
expit <- function(l)
{
return(exp(l)/(1+exp(l)))
}
expit(colMeans(fitK2$eta))
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
karate %>% as_tbl_graph() %>% activate(nodes)
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
graph = fitK2$graph %>% # should be an igraph object
as_tbl_graph() %>%
activate(nodes) %>%
mutate(sig = sigma,
true = color)
graph
p = ggraph(graph,layout = "kk") +
geom_node_point(aes(color = sig,
shape = true),
size = 4) +
geom_edge_link(alpha = 0.5) +
return(p)
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
NULL == 1
is.null(NULL)
data("foodwebs")
foodwebs %>% as_tbl_graph()
foodwebs
class(foodwebs)
class(karate)
data("karate")
class(karate)
igraph::as.igraph(foodwebs)
library(igraphdata)
library(igraph)
graph_from_adj_list(foodwebs)
foodwebs
str(foodwebs)
class(foodwebs[[1]])
rm(foodwebs)
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
class(fitK2$graph)
class(graph) != "igraph"
class(graph)
unlink('Code/sbmlogit/karate_test_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE,cache = TRUE)
library(igraph)
library(igraphdata)
library(sbmlogit)
data("karate")
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 2000)
# Function for estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
SigmaK2 <- fitK2$sample # posterior samples
sigmaK2 <- apply(t(apply(SigmaK2, 2, mp, 2)), 1, which.max) # posterior estimator
scentroidK2 <- sbmlogit.remap(sigmaK2) # remapped posterior estimator
print(scentroidK2)
# function to compute WAIC
# verify this is correct
waic <- function(fit,burn = 0)
{
S <- length(fit$lhood)
ls <- exp(fit$lhood[(burn+1):S])
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 1000)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 1000)
fitK5 <- sbmlogit.mcmc(graph = karate,alpha = 5,nsamples = 1000)
waic(fitK2, burn = 100)
waic(fitK3, burn = 100)
waic(fitK4, burn = 100)
waic(fitK5, burn = 100)
source("mean_CRI.R")
mean_CRI(fitK2$gamma)
expit <- function(l)
{
return(exp(l)/(1+exp(l)))
}
expit(colMeans(fitK2$eta))
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
unlink('Code/sbmlogit/karate_test_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE,cache = TRUE)
library(igraph)
library(igraphdata)
library(sbmlogit)
data("karate")
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 2000)
# Function for estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
SigmaK2 <- fitK2$sample # posterior samples
sigmaK2 <- apply(t(apply(SigmaK2, 2, mp, 2)), 1, which.max) # posterior estimator
scentroidK2 <- sbmlogit.remap(sigmaK2) # remapped posterior estimator
print(scentroidK2)
# function to compute WAIC
# verify this is correct
waic <- function(fit,burn = 0)
{
S <- length(fit$lhood)
ls <- exp(fit$lhood[(burn+1):S])
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 1000)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 1000)
fitK5 <- sbmlogit.mcmc(graph = karate,alpha = 5,nsamples = 1000)
waic(fitK2, burn = 100)
waic(fitK3, burn = 100)
waic(fitK4, burn = 100)
waic(fitK5, burn = 100)
source("mean_CRI.R")
mean_CRI(fitK2$gamma)
expit <- function(l)
{
return(exp(l)/(1+exp(l)))
}
expit(colMeans(fitK2$eta))
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2,ground = "color")
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2,ground = "color")
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2,ground = "color")
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2,ground = color)
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2)
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2, ground = "color")
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
source('~/Documents/School/Research/Code/sbmlogit/plot_sbmlogit.R')
source("plot_sbmlogit.R")
fitK2_plot <- plot_sbmlogit(fitK2, ground = "color")
ggsave(filename = "karate_fit.jpg",
plot = fitK2_plot,
device = "jpg")
colMeans(fitK2$eta)
dim(SigmaK2)
shiny::runApp('Code/sbmlogit/SBM3')
install.packages("devtools")
install.packages("roxygen2")
getwd()
library(devtools)
library(roxygen2)
setwd("~/Documents/School/Research/Code/sbmlogit")
getwd()
create("sbmlhelpers")
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE,cache = TRUE)
library(igraph)
library(igraphdata)
library(sbmlogit)
data("karate")
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 2000)
# Function for estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
SigmaK2 <- fitK2$sample # posterior samples
sigmaK2 <- apply(t(apply(SigmaK2, 2, mp, 2)), 1, which.max) # posterior estimator
scentroidK2 <- sbmlogit.remap(sigmaK2) # remapped posterior estimator
print(scentroidK2)
dim(SigmaK2)
apply(SigmaK2, 2, mp, 2)
t(apply(SigmaK2, 2, mp, 2))
libr
