group_df <- read.table("Data/Disease_vs_Control_groups.txt",
header = TRUE,
sep = '\t')
View(group_df)
colnames(counts_mat)
sort(colnames(counts_mat))
library(tidyverse)
# Read group data
group_df <- read.table("Data/Disease_vs_Control_groups.txt",
header = TRUE,
sep = '\t') %>%
arrange(samples)
View(group_df)
group_df
colnames(counts_mat)
samples <- sort(colnames(counts_mat))
samples
counts_mat <- counts_mat[,samples]
View(counts_mat)
# Read group data
groups <- read.table("Data/Disease_vs_Control_groups.txt",
header = TRUE,
sep = '\t') %>%
arrange(samples) %>%
pull(condition)
groups
genes <- counts[-1,1]
genes
genes <- as.character(counts[-1,1])
genes
View(counts)
counts_mat <- counts[,-1]
View(counts_mat)
View(counts)
samples <- sort(colnames(counts_mat))
counts_mat <- counts_mat[,samples]
genes <- as.character(counts[,1])
genes
# packages
library(edgeR)
library(tidyverse)
# Read count data
counts <- read.table("Data/Disease_vs_Control_Counts.txt",
header = TRUE,
sep = '\t')
counts_mat <- counts[,-1] # remove row name row
samples <- sort(colnames(counts_mat)) # arrange columns
counts_mat <- counts_mat[,samples] # rearrange columns
genes <- as.character(counts[,1])
# Read group data
groups <- read.table("Data/Disease_vs_Control_groups.txt",
header = TRUE,
sep = '\t') %>%
arrange(samples) %>%
pull(condition)
# Form DGEList
y <- DGEList(counts = counts_mat,
genes = genes,
group = groups)
y$samples$lib.size
colSums(y$counts)
# Normalization
y <- calcNormFactors(y)
# packages
library(edgeR)
library(tidyverse)
# Read count data
counts <- read.table("Data/Disease_vs_Control_Counts.txt",
header = TRUE,
sep = '\t')
counts_mat <- counts[,-1] # remove row name row
samples <- sort(colnames(counts_mat)) # arrange columns
counts_mat <- counts_mat[,samples] # rearrange columns
genes <- as.character(counts[,1])
# Read group data
groups <- read.table("Data/Disease_vs_Control_groups.txt",
header = TRUE,
sep = '\t') %>%
arrange(samples) %>%
pull(condition)
# Form DGEList
y <- DGEList(counts = counts_mat,
genes = genes,
group = groups)
# Order and remove duplicates
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
d <- duplicated(y$genes$genes)
y <- y[!d,]
# Normalization
y <- calcNormFactors(y)
# Heatmap of correlation among samples
hm <- pheatmap(cor(cpm(y)))
library(pheatmap)
# Heatmap of correlation among samples
hm <- pheatmap(cor(cpm(y)))
# Heatmap of correlation among samples
cor_plot <- pheatmap(cor(cpm(y)),
cluster_rows = F,
cluster_cols = F)
cor_plot
plotMDS(y)
# MDS of filtered data
n.pre <- nrow(y)
n.pre
y <- y[rowSums(cpm(y) > 1) >= 3,,keep.lib.sizes = FALSE]
n.post <- nrow(y)
n.post
mds_plot_filtered <- plotMDS(y)
groups
colnames(counts_mat)
paste(colnames(counts_mat),as.character(groups))
paste0(colnames(counts_mat),as.character(groups))
paste(colnames(counts_mat),as.character(groups))
paste(colnames(counts_mat),as.character(groups),sep = "_")
# packages
library(edgeR)
library(tidyverse)
library(pheatmap)
# Read count data
counts <- read.table("Data/Disease_vs_Control_Counts.txt",
header = TRUE,
sep = '\t')
counts_mat <- counts[,-1] # remove row name row
samples <- sort(colnames(counts_mat)) # arrange columns
counts_mat <- counts_mat[,samples] # rearrange columns
genes <- as.character(counts[,1]) # pull genes
# Read group data
groups <- read.table("Data/Disease_vs_Control_groups.txt",
header = TRUE,
sep = '\t') %>%
arrange(samples) %>%
pull(condition)
colnames(counts_mat) <- paste(colnames(counts_mat),
as.character(groups),
sep = "_")
# Form DGEList
y <- DGEList(counts = counts_mat,
genes = genes,
group = groups)
# Order and remove duplicates
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
d <- duplicated(y$genes$genes)
y <- y[!d,]
# Normalization
y <- calcNormFactors(y)
# Heatmap of correlation among samples
cor_plot <- pheatmap(cor(cpm(y)),
cluster_rows = F,
cluster_cols = F)
cor_plot
# Heatmap of correlation among samples
cor_plot <- pheatmap(cor(cpm(y)),
cluster_rows = T,
cluster_cols = T)
# Heatmap of correlation among samples
cor_plot <- pheatmap(cor(cpm(y)),
cluster_rows = F,
cluster_cols = F)
cor_plot
plotMDS(y)
# MDS of filtered data
n.pre <- nrow(y)
n.pre
y <- y[rowSums(cpm(y) > 1) >= 3,,keep.lib.sizes = FALSE]
n.post <- nrow(y)
n.post
mds_plot_filtered <- plotMDS(y)
cor_plot_filtered <- pheatmap(cor(cpm(y)),
cluster_rows = F,
cluster_cols = F)
colnames(counts_mat)
length("control")
y.top50 <- y[1:50,]
o <- order(rowSums(cpm(y.top50)[,4:6]+1) / rowSums(cpm(y.top50)[,1:3]+1))
p50 <- pheatmap(log10(cpm(y.top50)+1)[o,],
scale="row",
cluster_rows=FALSE,
cluster_cols=FALSE,
show_rownames=TRUE)
p50
y.top100 <- y[1:100,]
o <- order(rowSums(cpm(y.top100)[,4:6]+1) / rowSums(cpm(y.top100)[,1:3]+1))
p100 <- pheatmap(log10(cpm(y.top100)+1)[o,],
scale="row",
cluster_rows=FALSE,
cluster_cols=FALSE,
show_rownames=TRUE)
cor_plot_filtered
# packages
library(edgeR)
library(tidyverse)
library(pheatmap)
# Read count data
counts <- read.table("Data/Disease_vs_Control_Counts.txt",
header = TRUE,
sep = '\t')
counts_mat <- counts[,-1] # remove row name row
genes <- as.character(counts[,1]) # pull genes
# Read group data
groups_df <- read.table("Data/Disease_vs_Control_groups.txt",
header = TRUE,
sep = '\t')
# get groups
groups <- groups_df %>%
pull(condition) %>%
as.character()
# Get sample order
samples <- groups_df %>%
pull(samples) %>%
as.character()
counts_mat <- counts_mat[,samples]
colnames(counts_mat) <- paste(colnames(counts_mat),
groups,
sep = "_")
colnames(counts_mat)
y <- DGEList(counts = counts_mat,
genes = genes,
group = groups)
# Order and remove duplicates
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
d <- duplicated(y$genes$genes)
y <- y[!d,]
# Normalization
y <- calcNormFactors(y)
# Heatmap of correlation among samples
cor_plot <- pheatmap(cor(cpm(y)),
cluster_rows = F,
cluster_cols = F)
cor_plot
plotMDS(y)
n.pre <- nrow(y)
n.pre
y <- y[rowSums(cpm(y) > 1) >= 3,,keep.lib.sizes = FALSE]
n.post <- nrow(y)
n.post
mds_plot_filtered <- plotMDS(y)
cor_plot_filtered <- pheatmap(cor(cpm(y)),
cluster_rows = F,
cluster_cols = F)
mds_plot_filtered
plotMDS(y)
y.top50 <- y[1:50,]
o <- order(rowSums(cpm(y.top50)[,4:6]+1) / rowSums(cpm(y.top50)[,1:3]+1))
p50 <- pheatmap(log10(cpm(y.top50)+1)[o,],
scale="row",
cluster_rows=FALSE,
cluster_cols=FALSE,
show_rownames=TRUE)
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/carterallen/Documents/School/Research")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/carterallen/Documents/School/Research")
# packages
library(edgeR)
library(tidyverse)
library(pheatmap)
# Read count data
counts <- read.table("Data/Disease_vs_Control_Counts.txt",
header = TRUE,
sep = '\t')
getwd()
# Read count data
counts <- read.table("Data/Disease_vs_Control_Counts.txt",
header = TRUE,
sep = '\t')
getwd()
read.table("Data/Disease_vs_Control_Counts.txt")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/carterallen/Documents/School/Research")
# packages
library(edgeR)
library(tidyverse)
library(pheatmap)
# Read count data
counts <- read.table("Data/Disease_vs_Control_Counts.txt",
header = TRUE,
sep = '\t')
counts_mat <- counts[,-1] # remove row name row
genes <- as.character(counts[,1]) # pull genes
# Read group data
groups_df <- read.table("Data/Disease_vs_Control_groups.txt",
header = TRUE,
sep = '\t')
# get groups
groups <- groups_df %>%
pull(condition) %>%
as.character()
# Get sample order
samples <- groups_df %>%
pull(samples) %>%
as.character()
counts_mat <- counts_mat[,samples]
colnames(counts_mat) <- paste(colnames(counts_mat),
groups,
sep = "_")
# Form DGEList
y <- DGEList(counts = counts_mat,
genes = genes,
group = groups)
# Order and remove duplicates
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
d <- duplicated(y$genes$genes)
y <- y[!d,]
# Normalization
y <- calcNormFactors(y)
View(groups_df)
count_plot <- pheatmap(cpm(y),
cluster_cols = F,
cluster_rows = F)
count_plot <- pheatmap(cpm(y),
cluster_cols = F,
cluster_rows = F,
show_rownames = F)
str(cpm(y))
head(cpm(y))
count_plot <- pheatmap(log10(cpm(y)),
cluster_cols = F,
cluster_rows = F,
show_rownames = F)
count_plot <- pheatmap(log10(cpm(y) + 1),
cluster_cols = F,
cluster_rows = F,
show_rownames = F)
View(groups_df)
count_plot <- pheatmap(log10(cpm(y) + 1),
cluster_cols = F,
cluster_rows = F,
show_rownames = F)
count_plot
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
knitr::opts_knit$set(root.dir = "/Users/carterallen/Documents/School/Research")
# packages
library(edgeR)
library(tidyverse)
library(pheatmap)
# Read count data
counts <- read.table("Data/Disease_vs_Control_Counts.txt",
header = TRUE,
sep = '\t')
counts_mat <- counts[,-1] # remove row name row
genes <- as.character(counts[,1]) # pull genes
# Read group data
groups_df <- read.table("Data/Disease_vs_Control_groups.txt",
header = TRUE,
sep = '\t')
# get groups
groups <- groups_df %>%
pull(condition) %>%
as.character()
# Get sample order
samples <- groups_df %>%
pull(samples) %>%
as.character()
counts_mat <- counts_mat[,samples]
colnames(counts_mat) <- paste(colnames(counts_mat),
groups,
sep = "_")
# Form DGEList
y <- DGEList(counts = counts_mat,
genes = genes,
group = groups)
# Order and remove duplicates
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
d <- duplicated(y$genes$genes)
y <- y[!d,]
# Normalization
y <- calcNormFactors(y)
samples
groups
View(groups_df)
groups_df$patient
as.numeric(groups_df$patient)
as.numeric(as.character(groups_df$patient))
as.character(groups$patient)
as.character(groups_df$patient)
# Read group data
groups_df <- read.table("Data/Disease_vs_Control_groups.txt",
header = TRUE,
sep = '\t') %>%
mutate(patient = factor(patient,
levels = c("one",
"two",
"three",
"four",
"five",
"six",
"seven",
"eight",
"nine",
"ten",
"eleven",
"twelve",
"thirteen",
"fourteen",
"fifteen",
"sixteen")))
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
knitr::opts_knit$set(root.dir = "/Users/carterallen/Documents/School/Research")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
knitr::opts_knit$set(root.dir = "/Users/carterallen/Documents/School/Research")
# Read count data
counts <- read.table("Data/Disease_vs_Control_Counts.txt",
header = TRUE,
sep = '\t')
counts_mat <- counts[,-1] # remove row name row
genes <- as.character(counts[,1]) # pull genes
# Read group data
groups_df <- read.table("Data/Disease_vs_Control_groups.txt",
header = TRUE,
sep = '\t') %>%
mutate(patient = factor(patient,
levels = c("one",
"two",
"three",
"four",
"five",
"six",
"seven",
"eight",
"nine",
"ten",
"eleven",
"twelve",
"thirteen",
"fourteen",
"fifteen",
"sixteen")))
as.numeric(groups_df$patient)
order(groups_df$patient)
# Read count data
counts <- read.table("Data/Disease_vs_Control_Counts.txt",
header = TRUE,
sep = '\t')
counts_mat <- counts[,-1] # remove row name row
genes <- as.character(counts[,1]) # pull genes
# Read group data
groups_df <- read.table("Data/Disease_vs_Control_groups.txt",
header = TRUE,
sep = '\t') %>%
mutate(patient = factor(patient,
levels = c("one",
"two",
"three",
"four",
"five",
"six",
"seven",
"eight",
"nine",
"ten",
"eleven",
"twelve",
"thirteen",
"fourteen",
"fifteen",
"sixteen")),
twin_pair = as.numeric(patient))
# get groups
groups <- groups_df %>%
pull(condition) %>%
as.character()
# Get sample order
samples <- groups_df %>%
pull(samples) %>%
as.character()
counts_mat <- counts_mat[,samples]
colnames(counts_mat) <- paste(colnames(counts_mat),
groups,
sep = "_")
# Form DGEList
y <- DGEList(counts = counts_mat,
genes = genes,
group = groups)
# Order and remove duplicates
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
d <- duplicated(y$genes$genes)
y <- y[!d,]
# Normalization
y <- calcNormFactors(y)
order(groups_df$twin_pair)
group_df$twin_pair
groups_df$twin_pair
groups
rank(groups_df$twin_pair)
groups_df$twin_pair
shiny::runApp('Code/sbmlogit/SBM3')
runApp('Code/sbmlogit/SBM3')
library(shiny)
library(sbmlogit)
library(sbmlhelpers)
library(ggraph)
library(tidygraph)
library(tidyverse)
library(igraphdata)
setwd("~/Documents/School/Research/Code/sbmlogit/SBM3")
load)
load("data/karate.Rdata")
fit = sbmlogit.mcmc(karate)
fit = sbmlogit.mcmc(g)
fit = sbmlogit.mcmc(g,nsamples = 100)
save(fit,file = "temp_fit.Rdata")
rm(fit)
load("temp_fit.Rdata")
runApp()
sbmlogit::sbmlogit.plot(fit)
