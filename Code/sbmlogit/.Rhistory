return(v)
}
sigmaK2 <- fitK2$sample
scentroid <- apply(t(apply(sigmaK2, 2, mp, fitK2$ngroups)), 1, which.max)
scentroid
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,message = FALSE,data = FALSE)
# Chunk 2
library(igraph)
library(igraphdata)
library(sbmlogit)
# Chunk 3
data("karate")
# Chunk 4
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 100)
# Chunk 5
# Function for map estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
sigmaK2 <- fitK2$sample
scentroidK2 <- apply(t(apply(sigmaK2, 2, mp, fitK2$ngroups)), 1, which.max)
scentroidK2
sigmaK2 <- fitK2$sample
scentroidK2 <- sbmlogit.remap(apply(t(apply(sigmaK2, 2, mp, fitK2$ngroups)), 1, which.max))
scentroidK2
fitK2
fitK2$lhood
waic <- function(fit)
{
ls <- fit$lhood
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
waic(fitK2)
ls <- fitK2$lhood
ls
w <- 2*(log(mean(ls)) - mean(log(ls)))
mean(ls)
log(ls)
ls <- exp(fitK2$lhood)
w <- 2*(log(mean(ls)) - mean(log(ls)))
w
waic <- function(fit)
{
ls <- exp(fit$lhood)
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
waic(fitK2)
fitK2$mode
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,message = FALSE,data = FALSE)
# Chunk 2
library(igraph)
library(igraphdata)
library(sbmlogit)
# Chunk 3
data("karate")
# Chunk 4
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 100)
# Chunk 5
# Function for map estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
# Chunk 6
sigmaK2 <- fitK2$sample
scentroidK2 <- sbmlogit.remap(apply(t(apply(sigmaK2, 2, mp, fitK2$ngroups)), 1, which.max))
# Chunk 7
# function to compute WAIC
# verify this is correct
waic <- function(fit)
{
ls <- exp(fit$lhood)
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
# Chunk 8
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 100)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 100)
fitK5 <- sbmlogit.mcmc(graph = karate,alpha = 5,nsamples = 100)
waic(fitK2)
waic(fitK3)
waic(fitK4)
waic(fitK5)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,message = FALSE,data = FALSE)
# Chunk 2
library(igraph)
library(igraphdata)
library(sbmlogit)
# Chunk 3
data("karate")
# Chunk 4
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 100)
# Chunk 5
# Function for map estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
# Chunk 6
sigmaK2 <- fitK2$sample
scentroidK2 <- sbmlogit.remap(apply(t(apply(sigmaK2, 2, mp, fitK2$ngroups)), 1, which.max))
# Chunk 7
# function to compute WAIC
# verify this is correct
waic <- function(fit)
{
ls <- exp(fit$lhood)
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
# Chunk 8
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 100)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 100)
fitK5 <- sbmlogit.mcmc(graph = karate,alpha = 5,nsamples = 100)
waic(fitK2)
waic(fitK3)
waic(fitK4)
waic(fitK5)
fitK2$lhood
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,message = FALSE,data = FALSE)
# Chunk 2
library(igraph)
library(igraphdata)
library(sbmlogit)
# Chunk 3
data("karate")
# Chunk 4
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 100)
# Chunk 5
# Function for map estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
# Chunk 6
sigmaK2 <- fitK2$sample
scentroidK2 <- sbmlogit.remap(apply(t(apply(sigmaK2, 2, mp, fitK2$ngroups)), 1, which.max))
# Chunk 7
# function to compute WAIC
# verify this is correct
waic <- function(fit)
{
ls <- exp(fit$lhood)
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
# Chunk 8
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 100)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 100)
fitK5 <- sbmlogit.mcmc(graph = karate,alpha = 5,nsamples = 100)
waic(fitK2)
waic(fitK3)
waic(fitK4)
waic(fitK5)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,message = FALSE,data = FALSE)
# Chunk 2
library(igraph)
library(igraphdata)
library(sbmlogit)
# Chunk 3
data("karate")
# Chunk 4
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 100)
# Chunk 5
# Function for map estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
# Chunk 6
sigmaK2 <- fitK2$sample
scentroidK2 <- sbmlogit.remap(apply(t(apply(sigmaK2, 2, mp, fitK2$ngroups)), 1, which.max))
# Chunk 7
# function to compute WAIC
# verify this is correct
waic <- function(fit)
{
ls <- exp(fit$lhood)
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
# Chunk 8
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 100)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 100)
fitK5 <- sbmlogit.mcmc(graph = karate,alpha = 5,nsamples = 100)
waic(fitK2)
waic(fitK3)
waic(fitK4)
waic(fitK5)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,message = FALSE,data = FALSE)
# Chunk 2
library(igraph)
library(igraphdata)
library(sbmlogit)
# Chunk 3
data("karate")
# Chunk 4
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 100)
# Chunk 5
# Function for map estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
# Chunk 6
sigmaK2 <- fitK2$sample
scentroidK2 <- sbmlogit.remap(apply(t(apply(sigmaK2, 2, mp, fitK2$ngroups)), 1, which.max))
# Chunk 7
# function to compute WAIC
# verify this is correct
waic <- function(fit)
{
ls <- exp(fit$lhood)
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
# Chunk 8
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 100)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 100)
fitK5 <- sbmlogit.mcmc(graph = karate,alpha = 5,nsamples = 100)
waic(fitK2)
waic(fitK3)
waic(fitK4)
waic(fitK5)
fitK5$lhood
ls <- exp(fitK5$lhood)
w <- 2*(log(mean(ls)) - mean(log(ls)))
w
log(mean(ls))
mean(log(ls))
log(ls)
fitK5$lhood
log(abs(lhood))
log(abs(fitK5$lhood))
# function to compute WAIC
# verify this is correct
waic <- function(fit,burn = 0)
{
S <- length(fit$lhood)
ls <- exp(fit$lhood[burn:S])
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
waic(fitK2)
waic(fitK2,burn = 10)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,message = FALSE,data = FALSE)
# Chunk 2
library(igraph)
library(igraphdata)
library(sbmlogit)
# Chunk 3
data("karate")
# Chunk 4
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 1000)
# Chunk 5
# Function for map estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
# Chunk 6
sigmaK2 <- fitK2$sample
scentroidK2 <- sbmlogit.remap(apply(t(apply(sigmaK2, 2, mp, fitK2$ngroups)), 1, which.max))
# Chunk 7
# function to compute WAIC
# verify this is correct
waic <- function(fit,burn = 0)
{
S <- length(fit$lhood)
ls <- exp(fit$lhood[burn:S])
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
# Chunk 8
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 1000)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 1000)
fitK5 <- sbmlogit.mcmc(graph = karate,alpha = 5,nsamples = 1000)
waic(fitK2, burn = 100)
waic(fitK3, burn = 100)
waic(fitK4, burn = 100)
waic(fitK5, burn = 100)
waic(fitK2, burn = 100)
waic(fitK3, burn = 100)
waic(fitK4, burn = 100)
waic(fitK5, burn = 500)
sbmlogit.plot(fitK2)
sbmlogit.plot <- function (cm, ref=NULL) {
ngroups <- cm$ngroups
g <- cm$graph
# compute p
p <- matrix(nrow = vcount(g), ncol = ngroups)
if (cm$mode == "map") {
for (k in 1:ngroups)
p[,k] <- ifelse(cm$sigma == k, 1, 0)
}
else {
for (k in 1:ngroups)
p[,k] <- apply(cm$sample, 2, function(x) sum(x==k) / cm$niters)
}
# compute eta and label (estimate)
if (cm$mode == "mcmc") {
eta <- apply(cm$eta, 2, mean)
label <- apply(p, 1, which.max)
}
else {
eta <- cm$eta
label <- cm$sigma
}
# report
if (!is.null(ref))
print(c("Recall", sum(label==ref) / length(label)))
if (cm$mode == "mcmc") {
op <- par(mfrow=c(1, 3))
# [1]
plot(apply(p, 1, max), col=label + 1, pch=19, ylim=c(1 / ngroups, 1),
xlab='Vertex', ylab='Posterior')
abline(h=.5, lty=2)
}
else
op <- par(mfrow=c(1, 2))
# [2]
xg <- plotgraph(g, p, ref,, 2)
# [3]
if (cm$size == 0) {
plot(logit(degree(g) / (vcount(g) - 1)), eta, col=label + 1, pch=19,
xlab="logit(degree)", ylab="eta")
} else {
value <- E(g)$value # FIXME
s <- graph.strength(g, weights=value)
plot(logit(s / (sum(s) - s)), eta, col=label + 1,
pch=19, xlab="logit(weighted degree)", ylab="eta")
}
par(op)
invisible(list(x=xg, p=p))
}
sbmlogit.plot(fitK2)
sbmlogit::sbmlogit.plot(fitK2)
burn = 10
S = 20
burn:S
(burn+1):S
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,message = FALSE,data = FALSE)
# Chunk 2
library(igraph)
library(igraphdata)
library(sbmlogit)
# Chunk 3
data("karate")
# Chunk 4
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 1000)
# Chunk 5
# Function for map estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
# Chunk 6
sigmaK2 <- fitK2$sample
scentroidK2 <- sbmlogit.remap(apply(t(apply(sigmaK2, 2, mp, fitK2$ngroups)), 1, which.max))
# Chunk 7
# function to compute WAIC
# verify this is correct
waic <- function(fit,burn = 0)
{
S <- length(fit$lhood)
ls <- exp(fit$lhood[(burn+1):S])
w <- 2*(log(mean(ls)) - mean(log(ls)))
return(w)
}
# Chunk 8
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 1000)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 1000)
fitK5 <- sbmlogit.mcmc(graph = karate,alpha = 5,nsamples = 1000)
# Chunk 9
waic(fitK2, burn = 100)
waic(fitK3, burn = 100)
waic(fitK4, burn = 100)
waic(fitK5, burn = 100)
fitK2$gamma
dim(fitK2$gamma)
length(fitK2$gamma)
fitK4$gamma
dim(fitK4$gamma)
length(fitK2$gamma)
choose(4,2)
choose(2,2)
fitK2$eta
dim(fitK2$eta)
library(tidyverse)
qplot(fitK2$gamma)
mean(qplot(fitK2$gamma))
mean(fitK2$gamma)
colMeans(fitK2$eta)
col_summarize <- function(MAT,dig = 2)
{
k <- ncol(MAT)
ret_vec <- rep(0,k)
for(i in 1:k)
{
dat <- MAT[,i]
est <- round(median(dat),dig)
cri <- round(unname(quantile(dat,probs = c(0.025,0.975))),dig)
res <- paste(est," (",cri[1],", ",cri[2],")",sep = "")
ret_vec[i] <- res
}
return(ret_vec)
}
col_summarize(fitK2$eta)
summary(fitK2$gamma)
karate
vertex(karate)
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 1000)
fitK4 <- sbmlogit.mcmc(graph = karate,alpha = 4,nsamples = 1000)
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 1000)
scentroidK2
summary(fitK2$gamma)
colMeans(fitK2$eta)
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 2000)
summary(fitK2$gamma)
colMeans(fitK2$eta)
fitK3 <- sbmlogit.mcmc(graph = karate,alpha = 3,nsamples = 1000)
waic(fitK2, burn = 100)
waic(fitK3, burn = 100)
waic(fitK4, burn = 100)
waic(fitK5, burn = 100)
fitK2$sample
fitK2$sample - 1
col_means(fitK2$sample - 1)
colMeans(fitK2$sample - 1)
help("karate")
Sigma <- fitK2$sample
K <- 2
apply(Sigma, 2, mp, K)
Sigma
apply(Sigma, 2, mp, K)
t(apply(Sigma, 2, mp, K))
tapply(t(apply(Sigma, 2, mp, K)), 1, which.max)
apply(t(apply(Sigma, 2, mp, K)), 1, which.max)
sbmlogit.remap(apply(t(apply(Sigma, 2, mp, K)), 1, which.max))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE,cache = TRUE)
# Chunk 2
library(igraph)
library(igraphdata)
library(sbmlogit)
# Chunk 3
data("karate")
# Chunk 4
fitK2 <- sbmlogit.mcmc(graph = karate,alpha = 2,nsamples = 2000)
# Chunk 5
# Function for map estimator
mp = function(vec, K){
v = rep(1:K)
l = length(vec)
for (i in 1:K){
v[i] = sum(vec==i)/l
}
return(v)
}
SigmaK2 <- fitK2$sample # posterior samples
sigmaK2 <- apply(t(apply(SigmaK2, 2, mp, K)), 1, which.max) # posterior estimator
scentroidK2 <- sbmlogit.remap(sigmaK2) # remapped posterior estimator
print(scentroidK2)
data("USairports")
USairports
vertices(USairports)
vcount(USairports)
sbmlogit.mcmc(graph = USairports,nsamples = 100)
vcount(USairports)
